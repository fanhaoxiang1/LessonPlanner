export default {
  sectionTypeToMethods: {
    "引起注意": [
      { name: "开放性问题或应用案例", icon: "el-icon-question", color: "#337ecc" }
    ],
    "告知目标": [
      { name: "所有知识点的有序列表", icon: "el-icon-list", color: "#337ecc" },
      // { name: "展示目录", icon: "el-icon-menu", color: "#337ecc" }
    ],
    "回忆已有知识": [
      { name: "前置知识列表", icon: "el-icon-notebook-2", color: "#337ecc" },
      { name: "前置知识例题", icon: "el-icon-edit-outline", color: "#337ecc" }
    ],
    "展示内容": [
      { name: "生成定义", icon: "el-icon-info", color: "#337ecc" },
      { name: "生成算法", icon: "el-icon-setting", color: "#337ecc" },
      { name: "生成代码", icon: "el-icon-code", color: "#337ecc" },
      { name: "生成公式", icon: "el-icon-calculator", color: "#337ecc" }
    ],
    "提供教学指导": [
      // { name: "例题", icon: "el-icon-edit", color: "#337ecc" },
      { name: "生成例题", icon: "el-icon-refresh", color: "#337ecc" }
    ],
    "引出练习": [
      { name: "生成选择题", icon: "el-icon-check", color: "#337ecc" },
      { name: "生成填空题", icon: "el-icon-check", color: "#337ecc" },
      { name: "生成问答题", icon: "el-icon-message", color: "#337ecc" },
      { name: "小组讨论建议", icon: "el-icon-chat-dot-square", color: "#337ecc" },
      { name: "生成计算题", icon: "el-icon-calculator", color: "#337ecc" }
    ],
    "提供反馈": [
      // { name: "练习题答案", icon: "el-icon-circle-check", color: "#337ecc" },
      // { name: "练习题对应的分析", icon: "el-icon-data-analysis", color: "#337ecc" }
    ],
    "评估": [
      { name: "课后习题及答案", icon: "el-icon-document-checked", color: "#337ecc" }
    ],
    "知识迁移": [
      // { name: "大作业", icon: "el-icon-folder-checked", color: "#337ecc" },
      { name: "与课程内容相关的思考题", icon: "el-icon-lightbulb", color: "#337ecc" }
    ]
  },
  generalMethods: [
    // { name: "扩写内容", icon: "expand", color: "#a0cfff" },
    // { name: "缩写内容", icon: "compress", color: "#a0cfff" },
    { name: "重新生成", icon: "sync", color: "#a0cfff" },
    { name: "内容评价与讲解建议", icon: "question-circle", color: "#f3d19e" },
    { name: "生成幻灯片演示建议...", icon: "slideshow", color: "#f3d19e" },
    // { name: "评估当前内容", icon: "check-circle", color: "#b3e19d" }
  ],



  methodToPrompt: {
    "method1": `现在，请你根据我的教案内容，结合我的教学大纲，提供一个和当前教案内容相关的开放性问题。这是我的教学大纲{lesson_content}，当前的教案内容”{lesson_text}”。
        以下是具体要求：
        
        1. 返回Markdown格式的内容，只返回开放性问题部分。
        2. 返回的部分请对照所给定的教案内容来进行编写。
        3. 该开放性问题建立在学生对教学大纲所包含的教学内容不熟悉的背景下提出，此问题侧重于吸引被提问者对于教学内容的兴趣，而不是对知识点的考察。
        4. 该问题应当侧重于结合已学习知识和具体的事例进行提出，而不是对于知识点的深度应用。
        5. **不需要任何额外的解释文字，也不要以引用的方式返回！！！**
        
        以下是一个示例：
        输入：
        
        教学大纲：
        
        # 数据结构：快速排序
        
        ## 1. 引入快速排序
        
        ### 引起注意
        
        #### 5分钟
        
        **相关的应用案例：**
        在数据科学、机器学习等领域，我们经常需要处理大量的数据，并对这些数据进行排序。如何找到一种能够快速且有效地对大数据集进行排序的算法？
        
        **引入教学内容相关的开放性问题：**
        对于有大量重复元素的数据集，哪种排序算法更优？
        
        ## 2. 快速排序的基本概念和算法步骤
        
        ### 告知目标 & 展示内容
        
        #### 15分钟
        
        **学习目标：**
        理解快速排序的基本概念，掌握其算法步骤和分治策略。
        
        **内容展示：**
        通过PPT和板书，详细介绍快速排序的原理，包括“分区”操作以及如何递归地对每个子序列进行排序。同时，通过实例演示快速排序的整个过程。
        
        ## 3. 编写快速排序的代码
        
        ### 提供教学指导 & 引出练习
        
        #### 20分钟
        
        **教学指导：**
        老师现场编写快速排序的代码，并解释每一步的思路和代码实现。
        
        **练习：**
        学生根据老师的指导，自己尝试编写快速排序的代码，并在示例数据上运行和验证结果。
        
        ## 4. 分析快速排序的时间和空间复杂度
        
        ### 提供教学指导 & 引出练习
        
        #### 15分钟
        
        **教学指导：**
        老师解释如何分析快速排序的时间和空间复杂度，以及它在最好、平均和最坏情况下的性能。
        
        **练习：**
        学生尝试自己分析快速排序的时间和空间复杂度，并与冒泡排序和归并排序进行对比。
        
        ## 5. 优化快速排序和选择合适的排序算法
        
        ### 提供教学指导 & 引出练习
        
        #### 20分钟
        
        **教学指导：**
        老师介绍如何优化快速排序，例如通过三位取中法选择枢轴，以及在子序列长度小于某个阈值时使用插入排序等。同时，讨论在不同的数据特点下如何选择合适的排序算法。
        
        **练习：**
        学生尝试优化自己编写的快速排序代码，并思考在什么情况下会选择使用快速排序。
        
        ## 6. 课后作业和评估
        
        ### 评估 & 知识迁移
        
        #### 10分钟
        
        **课后作业：**
        学生需要提交一份报告，报告中需要包括他们编写的快速排序代码，以及对快速排序时间和空间复杂度的分析。
        
        **评估：**
        老师将根据学生的报告来评估他们是否达到了学习目标。
        
        **知识迁移：**
        在后续的数据结构和算法设计课程中，学生将需要利用所学的快速排序知识来解决更复杂的问题。
        
        教案内容：
        
        ## 1. 引入快速排序
        
        ### 引起注意
        
        #### 5分钟
        
        1. **准备材料**：
          - 白板或黑板或者PPT。
          - 一组可排序的数字，例如：[8, 5, 2, 6, 9, 3, 7, 4, 1, 10]
        2. **案例引入**：
          - 首先，向学生展示上述数字序列，并告诉他们，假设这是一组需要排序的数据，我们需要找到一种能够快速且有效地对这些数据进行排序的方法。
          - 接着，引出现实中的例子，比如，数据科学家在处理大量的数据时，如何快速找出中位数或者是某个百分位的数值？或者在机器学习中，如何在大量的特征中找出最重要的特征？
          - 通过这些例子，让学生感受到排序算法在现实生活和工作中的重要性和应用价值。
        3. **问题提出**：
          - 接着，向学生提出问题：“如果我们的数据集中有大量的重复元素，比如，我们需要对一组调查数据进行排序，其中有很多相同的回答，你认为哪种排序算法会更优？”
          - 提醒学生，这是一个开放性的问题，可能没有绝对的答案，因为最优的排序算法可能取决于具体的应用场景和需求。
        4. **讨论与思考**：
          - 邀请学生思考并讨论这个问题。让他们尝试猜测在有大量重复元素的情况下，哪种排序算法可能更优。
          - 让学生分享他们的想法，无论是直觉、猜测，还是基于他们对排序算法的现有知识。
          - 作为教师，你可以引导他们考虑不同的角度，比如，哪种算法的时间复杂度更低？哪种算法更容易实现？哪种算法更稳定？
        
        **注意**：在这个阶段，我们并不期望学生能够给出完全正确的答案，因为他们可能还没有学习过快速排序。这个问题的目的是激发他们的好奇心，引导他们思考排序算法的选择和优化，为接下来的学习内容做好铺垫。`,
    "method2": "prompt2",
    "method3": "prompt3",
    "method4": "prompt4",
    // 更多映射...
  }
}